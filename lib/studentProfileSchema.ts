import { z } from "zod"

// Core Student Info
export const StudentInfoCoreSchema = z.object({
  student_id: z.string().uuid().optional(), // Optional for new students, generated by DB
  first_name: z.string().min(1, "First name is required"),
  last_name: z.string().min(1, "Last name is required"),
  date_of_birth: z
    .string()
    .optional()
    .nullable()
    .transform((val) => (val === "" ? null : val)),
  gender: z.string().optional().nullable(),
  email: z
    .string()
    .email("Invalid email address")
    .optional()
    .nullable()
    .transform((val) => (val === "" ? null : val)),
  phone_number: z.string().optional().nullable(),
  address: z.string().optional().nullable(),
  city: z.string().optional().nullable(),
  state: z.string().optional().nullable(),
  zip_code: z.string().optional().nullable(),
  enrollment_date: z
    .string()
    .optional()
    .nullable()
    .transform((val) => (val === "" ? null : val)),
  major: z
    .string()
    .optional()
    .nullable()
    .transform((val) => (val === "" ? null : val)),
  gpa: z.preprocess(
    (val) => (val === "" ? undefined : Number(val)),
    z.number().min(0).max(4, "GPA must be between 0.00 and 4.00").optional(),
  ),
  academic_standing: z.string().optional().nullable(),
  advisor_id: z.string().optional(),
  emergency_contact_name: z.string().optional(),
  emergency_contact_phone: z.string().optional(),
  medical_conditions: z.string().optional(),
  notes: z.string().optional(),
  full_name: z.string().min(1, "Full name is required"),
  grade_level: z.number().int().min(0, "Grade level must be a positive integer"),
  academic_year: z.string().min(1, "Academic year is required"),
  status: z.string().optional().default("None"),
  advisor: z.string().optional().nullable(),
  expected_graduation_date: z.string().optional().nullable(), // YYYY-MM-DD
  profile_picture_url: z.string().url("Invalid URL").optional().nullable(),
})

// Courses
export const CourseSchema = z.object({
  course_id: z.string().min(1, "Course ID is required"),
  student_id: z.string().min(1, "Student ID is required"),
  course_name: z.string().min(1, "Course name is required"),
  credits: z.number().min(0.5, "Credits must be at least 0.5"),
  grade: z.string().min(1, "Grade is required"),
  semester: z.string().min(1, "Semester is required"),
  year: z.number().int().min(1900, "Year must be a valid year"),
})

// Assessment Breakdown
export const AssessmentBreakdownSchema = z.object({
  type: z.string().min(1, "Assessment type is required"),
  performance_metric: z.number().min(0, "Performance metric must be non-negative"),
  description: z.string().optional(),
})

// GPA History
export const GPAHistoryEntrySchema = z.object({
  academic_year: z.string().min(1, "Academic year is required"),
  term: z.string().min(1, "Term is required"),
  gpa_value: z.number().min(0, "GPA value must be non-negative").max(4.0, "GPA cannot exceed 4.0"),
})

// Absences
export const AbsencesSchema = z.object({
  excused: z.number().int().min(0, "Excused absences must be non-negative"),
  unexcused: z.number().int().min(0, "Unexcused absences must be non-negative"),
})

// Tardies
export const TardiesSchema = z.object({
  count: z.number().int().min(0, "Tardy count must be non-negative"),
  dates: z.array(z.string()).default([]), // Array of date strings
})

// Attendance
export const AttendanceDataSchema = z
  .object({
    attendance_id: z.string().min(1, "Attendance ID is required"),
    student_id: z.string().min(1, "Student ID is required"),
    date: z.string().regex(/^\d{4}-\d{2}-\d{2}$/, "Date must be YYYY-MM-DD"),
    status: z.enum(["Present", "Absent", "Tardy"]),
    course_id: z.string().optional(),
  })
  .optional()

// Extracurricular Activities
export const ExtracurricularActivitySchema = z.object({
  activity_name: z.string().min(1, "Activity name is required"),
  role_title: z.string().optional(),
  start_date: z.string().min(1, "Start date is required"),
  end_date: z.string().optional(),
  is_ongoing: z.boolean().default(false),
  is_leadership: z.boolean().default(false),
})

// IEP/504 Plan Information
export const IEP504PlanSchema = z
  .object({
    has_plan: z.boolean(),
    plan_type: z.string().optional(),
    accommodations: z.array(z.string()).default([]),
    last_updated_date: z.string().optional(),
  })
  .optional()

// College Counseling Milestones
export const CollegeMilestoneSchema = z.object({
  milestone_name: z.string().min(1, "Milestone name is required"),
  status: z.string().min(1, "Status is required"),
  date: z.string().min(1, "Date is required"),
})

// Narrative Teacher Comments
export const NarrativeCommentSchema = z.object({
  subject: z.string().min(1, "Subject is required"),
  teacher: z.string().min(1, "Teacher is required"),
  term: z.string().min(1, "Term is required"),
  comment_text: z.string().min(1, "Comment text is required"),
})

// Advisor/Counselor/Behavior Notes (re-usable)
export const StaffNoteSchema = z.object({
  staff_name: z.string().min(1, "Staff name is required"),
  role: z.string().optional(),
  date: z.string().min(1, "Date is required"),
  note_text: z.string().min(1, "Note text is required"),
})

// Soft Skill Inferences
export const SoftSkillInferenceSchema = z.object({
  skill_name: z.string().min(1, "Skill name is required"),
  source_phrase: z.string().min(1, "Source phrase is required"),
  explanation: z.string().min(1, "Explanation is required"),
  confidence_level: z.string().min(1, "Confidence level is required"),
})

// Main Structured Data Section of the Student Profile
export const StudentProfileDataSchema = z.object({
  student_info: StudentInfoCoreSchema,
  courses: z.array(CourseSchema).default([]),
  assessment_breakdown_by_type: z.array(AssessmentBreakdownSchema).default([]),
  gpa_history: z.array(GPAHistoryEntrySchema).default([]),
  attendance: AttendanceDataSchema,
  extracurricular_activities: z.array(ExtracurricularActivitySchema).default([]),
  iep_504_plan_information: IEP504PlanSchema,
  college_counseling_milestones: z.array(CollegeMilestoneSchema).default([]),
})

// Unstructured Data Section of the Student Profile
export const UnstructuredDataSchema = z
  .object({
    narrative_teacher_comments: z.array(NarrativeCommentSchema).default([]),
    advisory_counselor_notes: z.array(StaffNoteSchema).default([]),
    behavior_social_emotional_notes: z.array(StaffNoteSchema).default([]),
  })
  .default({})

// Overall Student Profile Input Payload
export const StudentIngestionPayloadSchema = z.object({
  student_profile: StudentProfileDataSchema,
  unstructured_data: UnstructuredDataSchema,
  soft_skill_inferences: z.array(SoftSkillInferenceSchema).default([]),
})

// Response model for GET /students/{id}
export const StudentProfileResponseSchema = z.object({
  student_profile: StudentProfileDataSchema,
  unstructured_data: UnstructuredDataSchema,
  soft_skill_inferences: z.array(SoftSkillInferenceSchema).default([]),
})

// Schema for updating student data (PATCH)
export const StudentUpdatePayloadSchema = z.object({
  student_id: z.string().uuid().optional(), // Optional for new students, generated by DB
  first_name: z.string().min(1, "First name is required").optional(),
  last_name: z.string().min(1, "Last name is required").optional(),
  date_of_birth: z
    .string()
    .optional()
    .nullable()
    .transform((val) => (val === "" ? null : val))
    .optional(),
  gender: z.string().optional().nullable().optional(),
  email: z
    .string()
    .email("Invalid email address")
    .optional()
    .nullable()
    .transform((val) => (val === "" ? null : val))
    .optional(),
  phone_number: z.string().optional().optional(),
  address: z.string().optional().optional(),
  city: z.string().optional().optional(),
  state: z.string().optional().optional(),
  zip_code: z.string().optional().optional(),
  enrollment_date: z
    .string()
    .optional()
    .nullable()
    .transform((val) => (val === "" ? null : val))
    .optional(),
  major: z
    .string()
    .optional()
    .nullable()
    .transform((val) => (val === "" ? null : val))
    .optional(),
  gpa: z
    .preprocess(
      (val) => (val === "" ? undefined : Number(val)),
      z.number().min(0).max(4, "GPA must be between 0.00 and 4.00").optional(),
    )
    .optional(),
  academic_standing: z.string().optional().optional(),
  advisor_id: z.string().optional(),
  emergency_contact_name: z.string().optional(),
  emergency_contact_phone: z.string().optional(),
  medical_conditions: z.string().optional(),
  notes: z.string().optional(),
  full_name: z.string().min(1, "Full name is required").optional(),
  grade_level: z.number().int().min(0, "Grade level must be a positive integer").optional(),
  academic_year: z.string().min(1, "Academic year is required").optional(),
  status: z.string().optional(),
  courses: z.array(CourseSchema).optional(),
  assessment_breakdown_by_type: z.array(AssessmentBreakdownSchema).optional(),
  gpa_history: z.array(GPAHistoryEntrySchema).optional(),
  attendance: AttendanceDataSchema,
  extracurricular_activities: z.array(ExtracurricularActivitySchema).optional(),
  iep_504_plan_information: IEP504PlanSchema,
  college_counseling_milestones: z.array(CollegeMilestoneSchema).optional(),
  narrative_teacher_comments: z.array(NarrativeCommentSchema).optional(),
  advisory_counselor_notes: z.array(StaffNoteSchema).optional(),
  behavior_social_emotional_notes: z.array(StaffNoteSchema).optional(),
  soft_skill_inferences: z.array(SoftSkillInferenceSchema).optional(),
})

// Schema for Student Summary (GET /students)
export const StudentSummarySchema = z.object({
  id: z.string().uuid(),
  full_name: z.string(),
  grade_level: z.number().int(),
  academic_year: z.string(),
  status: z.string(),
  has_504_plan: z.boolean().default(false),
})

// Schema for partial updates (e.g., for PATCH requests)
export const studentProfileUpdateSchema = StudentInfoCoreSchema.partial()
export type StudentProfileUpdate = z.infer<typeof studentProfileUpdateSchema>

// Schema for GPA history (if you add this feature)
export const gpaHistorySchema = z.object({
  id: z.string().uuid().optional(),
  student_id: z.string().uuid(),
  gpa: z.number().min(0.0, "GPA must be at least 0.0").max(4.0, "GPA cannot exceed 4.0"),
  semester: z.string().min(1, "Semester is required"),
  year: z.number().int().min(1900, "Year must be valid").max(2100, "Year must be valid"),
})
export type GpaHistory = z.infer<typeof gpaHistorySchema>

// Schema for financial aid (if you add this feature)
export const FinancialAidSchema = z.object({
  financial_aid_id: z.string().min(1, "Financial Aid ID is required"),
  student_id: z.string().min(1, "Student ID is required"),
  aid_type: z.string().min(1, "Aid type is required"),
  amount: z.number().min(0, "Amount must be positive"),
  date_awarded: z.string().regex(/^\d{4}-\d{2}-\d{2}$/, "Date awarded must be YYYY-MM-DD"),
})
export type FinancialAid = z.infer<typeof FinancialAidSchema>
